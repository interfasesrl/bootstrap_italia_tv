{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% embed '@bootstrap_italia_paragraph/content/bi-paragraph-base.html.twig' with {
  paragraph: paragraph,
  content: content,
  attributes: attributes,
  view_mode: view_mode,
  logged_in: logged_in,
  is_admin: is_admin
} %}
  {% block content %}

    {% include '@bi-bcl/hero/hero.html.twig' with {
      hero_kicker: content.field_kicker,
      hero_title: content.field_title,
      hero_text: content.field_text,
      hero_cta_url: content.field_call_to_action[0]['#url'],
      hero_cta_label: content.field_call_to_action[0]['#title'],
      hero_cta_type: content.field_call_to_action_type[0]['#markup']|render,
      hero_small: content.field_small[0]|render == 'True' ? true : false,
      hero_description: content.field_description[0]|render,
      hero_overlay_color: content.field_color[0]['#markup']|render,
      hero_image_src: content.field_settings[0]['#paragraph'].field_background_image.entity.fileuri
        ? file_url( content.field_settings[0]['#paragraph'].field_background_image.entity.fileuri )
        : '',
      hero_image_alt: content.field_title,
      hero_image_light: content.field_hero_image_light[0]|render == 'True' ? true : false,
      hero_image_filter: content.field_hero_image_filter[0]|render == 'True' ? true : false,
      hero_text_centered: content.field_text_centered[0]|render == 'True' ? true : false,
      hero_overlapping_content: content.field_overlapping[0]|render == 'True' ? true : false,
    } %}

  {% endblock %}
{% endembed %}
